/****************************************Copyright (c)****************************************************
**                            Guangzhou ZHIYUAN electronics Co.,LTD.
**
**                                 http://www.zlgmcu.com
**
**--------------File Info---------------------------------------------------------------------------------
** File name:           queue.c
** Last modified Date:  2012-03-30
** Last Version:        V1.00
** Descriptions:        队列处理函数
**------------------------------------------------------------------------------------------------------
** Created by:          Zhengbailiang
** Created date:        2012-03-30
** Version:             V1.00
** Descriptions:        Create This File
**
**------------------------------------------------------------------------------------------------------
** Modified by:         
** Modified date:       
** Version:             
** Descriptions:        
**
*********************************************************************************************************/
#ifndef __ZLG_Queue_H 
#define __ZLG_Queue_H 


#include "stdint.h"
#include "intrinsics.h"
/*********************************************************************************************************
    声明数据类型，可以为8位或16位或32位
*********************************************************************************************************/
#define QUEUE_DATA_TYPE     uint8_t


/*********************************************************************************************************
    声明流控制传输阀值
         _______
        |       |
        |-------|   <---  流控制上限阀值（Q_FLOW_CTRL_UPPER_THRESHOLD），该值表示与队列顶部相差的
        |   队  |         数据个数，当队列数据个数大于（队列容量 - 上限阀值），则调用writeFull()。
        |       |         调用该函数即表示当前队列数据量过多，应使能流控制
        |       |
        |   列  |
        |-------|   <---  流控制下限阀值（Q_FLOW_CTRL_LOWER_THRESHOLD），该值表示与队列底部相差的
        |_______|         数据个数，当队列数据个数小于（下限阀值），则调用readEmpty()。
                          调用该函数即表示当前队列数据量过少，应禁能流控制

*********************************************************************************************************/
#define Q_FLOW_CTRL_ENABLE              0                              /*  使能流控制                  */   
#define Q_FLOW_CTRL_UPPER_THRESHOLD     32                            /*  上限阀值                    */
#define Q_FLOW_CTRL_LOWER_THRESHOLD     32                            /*  下限阀值                    */


/*********************************************************************************************************
    声明临界区进入、退出函数
*********************************************************************************************************/
//#define OS_ENTER_CRITICAL()    __no_operation()//disableInterrupts()    /*  进入临界区                  */
//#define OS_EXIT_CRITICAL()     __no_operation()//enableInterrupts()     /*  退出临界区                  */


/*********************************************************************************************************
    声明队列结构体
*********************************************************************************************************/
typedef struct {
    QUEUE_DATA_TYPE     *Out;                                           /*  指向数据输出位置            */
    QUEUE_DATA_TYPE     *In;                                            /*  指向数据输入位置            */
    QUEUE_DATA_TYPE     *End;                                           /*  指向Buf的结束位置           */
    uint16_t             NData;                                         /*  队列中数据个数              */
    uint16_t             MaxData;                                       /*  队列中允许存储的数据个数    */

    void                 (* readEmpty)(void);                           /*  读空处理函数                */
    void                 (* writeFull)(void);                           /*  写满处理函数                */
    QUEUE_DATA_TYPE      Buf[1];                                        /*  存储数据的空间              */
}tDATAQUEUE;


/*********************************************************************************************************
    外部函数声明
*********************************************************************************************************/
extern uint8_t      queueCreate(void       *vBuf,                       /*  初始化队列                  */
                                uint32_t    sizeOfBuf,
                                void        (*readEmpty)(void),
                                void        (*writeFull)(void));
extern uint8_t      queueRead(void *vBuf, QUEUE_DATA_TYPE *Ret);        /*  获取队列数据                */
extern uint8_t      queueWrite(void *vBuf, QUEUE_DATA_TYPE data);       /*  以FIFO的方式写队列          */
extern uint8_t      queueWriteFront(void *vBuf, QUEUE_DATA_TYPE data);  /*  以LIFO的方式写队列          */
extern uint16_t     queueNData(void *vBuf);                             /*  获取队列数据个数            */
extern uint16_t     queueSize(void *vBuf);                              /*  获取队列容量                */
extern void         queueFlush(void *vBuf);                             /*  清空队列数据                */


#endif
/*********************************************************************************************************
    End Of File
********************************************************************************************************/
